[gd_scene load_steps=8 format=3 uid="uid://3pqlp2xx3fm1"]

[ext_resource type="Texture2D" uid="uid://dqu5xvonywc2l" path="res://sprites/entities/Player/player.png" id="1_jibjg"]
[ext_resource type="Texture2D" uid="uid://m7mbh3wux401" path="res://sprites/entities/Player/player2.png" id="2_lxt3t"]

[sub_resource type="GDScript" id="GDScript_s07ab"]
script/source = "extends CharacterBody2D


const SPEED = 300.0
const JUMP_VELOCITY = -300.0

var ORB = -1

var bounced = 0

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")

func _ready():
	if (GlobalVariables.CheckPointPosition != null):
		position = GlobalVariables.CheckPointPosition
	GlobalVariables.CheckPointPosition = position
	
	var data = GlobalVariables.load_data()
	if (GlobalVariables.CurrentSelectedLevel >= 0):
		data.CurrentLevel = GlobalVariables.CurrentSelectedLevel
	while (len(data.Enemies) <= data.CurrentLevel) :
		data.Enemies.append(-1)
	data.CurrentEnemies = 0
	
	print(\"ENTERED LEVEL \", data.CurrentLevel)
	
	GlobalVariables.save_data(data)

func _physics_process(delta):
	GlobalVariables.load_data()
	# Add the gravity.
	if not is_on_floor() && GlobalVariables.PLAYER_GRAV == 1:
		velocity.y += gravity * delta
	elif not is_on_ceiling() && GlobalVariables.PLAYER_GRAV == -1:
		velocity.y -= gravity * delta

	# Handle Jump.
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor() && GlobalVariables.PLAYER_GRAV == 1:
		velocity.y = JUMP_VELOCITY
	elif Input.is_action_just_pressed(\"ui_accept\") and is_on_ceiling() && GlobalVariables.PLAYER_GRAV == -1:
		velocity.y = JUMP_VELOCITY * -1
	
	ORB = -1
	for i in $Area2D.get_overlapping_areas():
		if (i.name.substr(0, 9) == \"OrbYellow\"):
			ORB = 0
		elif (i.name.substr(0, 7) == \"OrbCyan\"):
			ORB = 1
	
	for i in $BottomArea.get_overlapping_bodies():
		if (i.name.substr(0, 14) == \"ProtectedEnemy\"):
			velocity.y = JUMP_VELOCITY
		elif (i.name.substr(0, 11) == \"NormalEnemy\"):
			velocity.y = JUMP_VELOCITY
		
	
	if (Input.is_action_just_pressed(\"ui_accept\") && ORB == 0):
		velocity.y = JUMP_VELOCITY * GlobalVariables.PLAYER_GRAV
	
	elif (Input.is_action_just_pressed(\"ui_accept\") && ORB == 1):
		print_debug(\"FLIP\")
		GlobalVariables.PLAYER_GRAV *= -1
		print_debug(GlobalVariables.PLAYER_GRAV)
		velocity.y = 0
		

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction = Input.get_axis(\"ui_left\", \"ui_right\")
	if direction:
		velocity.x = direction * SPEED
		bounced = 0
		if (velocity.x < 0):
			$AnimatedSprite2D.flip_h = true
		else:
			$AnimatedSprite2D.flip_h = false
	elif (bounced == 0):
		velocity.x = move_toward(velocity.x, 0, SPEED)
	
	if (is_on_floor() && bounced > 0):
		bounced -= 1
		
		
	if ((position.y) > GlobalVariables.BAR_LOWER || position.y < GlobalVariables.BAR_UPPER):
		GlobalVariables.resetCurrentScene()
		
	move_and_slide()
	
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_pdssk"]
size = Vector2(14, 15)

[sub_resource type="SpriteFrames" id="SpriteFrames_nj2qe"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_jibjg")
}, {
"duration": 1.0,
"texture": ExtResource("2_lxt3t")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1jpnj"]
size = Vector2(16, 16)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fc1u2"]
size = Vector2(16, 2)

[node name="Player" type="CharacterBody2D"]
script = SubResource("GDScript_s07ab")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 0.5)
shape = SubResource("RectangleShape2D_pdssk")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_nj2qe")
autoplay = "default"

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("RectangleShape2D_1jpnj")

[node name="BottomArea" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="BottomArea"]
position = Vector2(0, 8)
shape = SubResource("RectangleShape2D_fc1u2")
